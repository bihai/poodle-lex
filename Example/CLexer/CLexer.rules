# Comments
Let Comment = "" +
    '/\*' + '([^\*]|\*+[^/\*])*' + '\*+/' + '|' + # Multi-line comments
    "//[^\r\n]*"                                  # Single-line comments    
    
# Whitespace
Skip: '{Comment}'
Skip: '[ \t\v\n\f\r]+'

# Pre-processor
Reserve PPEnd: '\r?\n'
PPStart: "#" Enter Section Inherits
    Import PPEnd Exit Section
    Let PPContinueNextLine = '\\\r?\n'
    Let PPWhitespace = '[ \t\v\f]+'
    Skip: "{PPContinueNextLine}|{PPWhitespace}"
    PPDefine: "define" Switch PPArgs
    PPInclude: "include" Switch PPInclude
    PPError: "error" Switch PPErrorWarning
    PPWarning: "warning" Switch PPErrorWarning
    PPIf: "if" Switch PPArgs
    PPIfDef: "ifdef" Switch PPArgs
    PPIfNDef: "ifndef" Switch PPArgs
    PPElif: "elif" Switch PPArgs
    PPElseIf: "elseif" Switch PPArgs
    PPElse: "else" Switch PPArgs
    PPEndIf: "endif" Switch PPArgs
    PPUndef: "undef" Switch PPArgs
    PPPragma: "pragma" Switch PPErrorWarning
End Section
Section PPArgs Inherits
    Import PPEnd Exit Section
    Skip: "{PPStart.PPContinueNextLine}|{PPStart.PPWhitespace}"
    PPJoinTokens: '##'
    PPToString: '#'
End Section
Section PPInclude Inherits
    Import PPEnd Exit Section
    Skip: "{PPStart.PPContinueNextLine}|{PPStart.PPWhitespace}"
    Capture PPIncludeParameter: '"([^\r\n"\\]|\\([^\r]|\r\n))*"' + '|' + 
                                '\<([^\r\n\>\\]|\\([^\r]|\r\n))*\>'
End Section
Section PPErrorWarning
    Import PPEnd Exit Section
    Skip: '{Comment}'
    Skip: "{PPStart.PPContinueNextLine}|{PPStart.PPWhitespace}"
    Capture ErrorMessage: '([^\\\r\n]|\\[^\r\n]|\\\r?\n)+'
End Section

# Keywords
Auto: 'auto'
Break: 'break'
Case: 'case'
Char: 'char'
Const: 'const'
Continue: 'continue'
Default: 'default'
Do: 'do'
Double: 'double'
Else: 'else'
Enum: 'enum'
Extern: 'extern'
Float: 'float'
For: 'for'
Goto: 'goto'
If: 'if'
Int: 'int'
Long: 'long'
Register: 'register'
Return: 'return'
Short: 'short'
Signed: 'signed'
SizeOf: 'sizeof'
Static: 'static'
Struct: 'struct'
Switch: 'switch'
Typedef: 'typedef'
Union: 'union'
Unsigned: 'unsigned'
Void: 'void'
Volatile: 'volatile'
While: 'while'
Capture Identifier: '[[:alpha:]_][[:word:]]*'

# Constants and Literals
Let HexadecimalDigits = '0[Xx][[:xdigit:]]+'
Let IntegerConstant = '(' + 
    '{HexadecimalDigits}' + '|' + # Hexadecimal integer
    '0[0-7]*' + '|' +             # Octal integer
    '[1-9][[:digit:]]*' +         # Decimal integer
')([uU][lL]?|[lL][uU]?)?'
Let DecimalExponent = "[Ee][\+\-]?[[:digit:]]+"
Let HexadecimalExponent = "[Pp][\+\-]?[[:digit:]]+"
Let DecimalFloatingPointDigits = '(' +
    '[[:digit:]]*\.[[:digit:]]+' + '|' +        # 123.
    '[[:digit:]]+\.[[:digit:]]*' +              # .123
'){DecimalExponent}?'
Let HexadecimalFloatingPointDigits = '0x(' +
    '[[:xdigit:]]*\.[[:xdigit:]]+' + '|' +  # 0x.123
    '[[:xdigit:]]+\.[[:xdigit:]]*' +        # 0x123.
'){HexadecimalExponent}'
Let FloatingPointConstant = '(' +
    '{DecimalFloatingPointDigits}' + '|' +
    '{HexadecimalFloatingPointDigits}' + '|' +
    '[[:digit:]]+{DecimalExponent}' + '|' +
    '{HexadecimalDigits}{HexadecimalExponent}' +
')[FfLl]?'
Let CharacterConstant = "L?'([^\r\n\\]|\\[^\r\n0-7]|\\[0-7]{1,3})'"
Capture Constant: '' +
    '{IntegerConstant}' + '|' +
    '{FloatingPointConstant}' + '|' +
    '{CharacterConstant}'
Capture StringLiteral: 'L?"([^\r\n"\\]|\\([^\r]|\r\n))*"'

# Operators
Ellipsis: '\.\.\.'
RightAssign: '\>\>='
LeftAssign: '\<\<\='
AddAssign: '\+='
SubtractAssign: '\-='
MultiplyAssign: '\*='
DivideAssign: '/='
ModulusAssign: '%='
AndAssign: '&='
XorAssign: '\^='
OrAssign: '\|='
ShiftRight: '\>\>'
ShiftLeft: '\<\<'
Increment: '\+\+'
Decrement: '\-\-'
StructureDereference: '\-\>' 
BooleanAnd: '&&'
BooleanOr: '\|\|'
LessThanOrEqualTo: '\<='
GreaterThanOrEqualTo: '\>='
EqualTo: '=='
NotEqualTo: '!='
Semicolon: ';'
OpenScope: '\{'
CloseScope: '\}'
Comma: ','
Colon: '\:'
Assign: '='
OpenParenthesis: '\('
CloseParenthesis: '\)'
OpenSquareBracket: '\['
CloseSquareBracket: '\]'
Period: '\.'
BitwiseAnd: '&'
BooleanNot: '!'
BitwiseNot: '~'
Subtract: '\-'
Add: '\+'
Multiply: '\*'
Divide: '/'
Modulus: '%'
LessThan: '\<'
GreaterThan: '\>'
BitwiseXor: '\^'
BitwiseOr: '\|'
TernarySelect: '\?'
