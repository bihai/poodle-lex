{"name":"Poodle-lex","tagline":"Lexical analyzer generator with multilingual support.","body":"Poodle-Lex is a lexical analyzer generator, similar to lex and its variants. \r\nIt produces source code which scans an input stream and outputs a stream of \r\nword units. Features include Unicode support and a platform for supporting \r\narbitrary programming languages through plugins.\r\n\r\nUsage: `python __main__.py RULES_FILE OUTPUT_DIR [Optional arguments]`\r\n\r\n## Required arguments:\r\nRULES_FILE: A file containing token names and pattern definitions\r\nOUTPUT_DIR: An existing directory to which the state machine code is written.\r\n\r\n## Optional arguments:\r\n-n DOT_FILE,  --print-nfa DOT_FILE - Print a GraphViz(.dot) file with the lexical analyzer's NFA representation\r\n-d DOT_FILE,  --print-dfa DOT_FILE - Print a GraphViz(.dot) file with the lexical analyzer's DFA representation\r\n-m DOT_FILE,  --print-min-dfa DOT_FILE - Print a GraphViz(.dot) file with the lexical analyzer's minimized DFA representation.\r\n-e ENCODING,  --encoding ENCODING - Encoding of the input file. ENCODING must be an encoding codec name supported by Python.\r\n-l LANGUAGE,  --language LANGUAGE - Output emitter language.\r\n-i ALGORITHM, --minimizer ALGORITHM - Algorithm to use for minimizing the DFA. Default is hopcroft, but polynomial is allowed as well\r\n\r\n## Rules file:\r\nThe rules file is a simple format which describes the lexical analyzer as a \r\nset of token definitions, one on each line. The rules file consists of three\r\ntypes of statements:\r\n* Token rules\r\n* Variable definitions\r\n* Comments\r\n\r\nToken rules take the following form:\r\n`[COMMAND] TOKEN_ID: PATTERN`\r\n\r\nWhere **TOKEN_ID** is an alphanumeric ID, and **PATTERN **is a regular expression. \r\n**PATTERN** must be surrounded by either single or double quotes. Quotes can be \r\nescaped by using double-quotes (\"\" or '') inside of the pattern. If an \"i\" \r\nappears in front of the opening quote, then the pattern will be interpreted as \r\ncase-insensitive for ASCII Latin characters.\r\n\r\n**PATTERN** may consist of multiple strings, concatenated by \"+\". If a line ends \r\nwith \"+\", then the expression may extend over multiple lines. If a piece of \r\ntext matches two rules, then the rule appearing first is used.\r\n\r\n**COMMAND** is an optional word which describes actions to be done with. Commands \r\nare case-insensitive, and valid commands are:\r\n* Skip: The pattern will be matched, but no token will be produced\r\n* Captured: The text of the match will be returned along with the token\r\n\r\nVariable definitions take the following form:\r\n`Let VARIABLE_NAME = PATTERN`\r\n\r\nVariables can be substituted within a pattern, but are not themselves rules.\r\n**VARIABLE_NAME** is the name of a variable to define. **PATTERN** is a pattern in the \r\nsame format as with token rules.\r\n\r\nFinally, any text on a line after \"#\" is considered a comment. \r\n \r\n## Language plug-ins:\r\nAs packaged, Poodle-Lex supports the following language arguments\r\n* **freebasic**: FreeBasic language emitter with full Unicode support\r\n* **c-ascii**: C emitter using the stdio interface\r\n \r\nThe default language is freebasic. More languages can be supportd by \r\ninstalling plugins\r\n \r\n## Regular expression rules:\r\nPoodle-Lex patterns use a regular expression syntax similar to the IEEE POSIX \r\nERE standard. The pattern will match the characters present, and the following \r\nspecial characters can be used to define more complex patterns:\r\n* \".\": Matches any Unicode codepoint.\r\n* \"[...]\": Matches one of any characters inside of the brackets\r\n* \"[^...]\": Matches all Unicode codepoints except any characters inside the brackets.\r\n* \"{m, n}\": Matches the previous item if it repeats a minimum of m times and a maximum of n times.\r\n* \"*\": Matches the prevous item if it appears zero or more times in a row.\r\n* \"+\": Matches the previous item if it appears one or more times in a row.\r\n* \"?\": Matches the previous item if it appears zero or one times.\r\n* \"(...)\": Matches the patern within the parenthesis.\r\n* \"{...}\": Matches a pattern defined by a variable, identified by the text between the curly braces\r\n* \"\\\": Matches a special character or the next character literally\r\n* \"|\": Matches either the previous item or the next item.\r\n\r\nThe following standard special characters are NOT accepted:\r\n* \"$\": In the POSIX ERE standard, matches text at the end of a line or input\r\n* \"^\": In the POSIX ERE standard, matches text at the start of a line or input\r\n\r\nThese symbols are not supported because they require additional context. The \r\ncharacters are not allowed except when escaped and they are reserved for \r\nfuture use.\r\n\r\nThe following special characters are supported:\r\n* \"\\t\": Matches a tab (\\x09) character\r\n* \"\\r\": Matches a line feed (\\x0a) character\r\n* \"\\n\": Matches a carriage return (\\x0d) characeter\r\n* \"\\x**\": Matches a codepoint between 0 and 255, with \"*\" being any hexidecimal digit\r\n* \"\\u****\": Matches a codepoint between 0 and 65535, with \"*\" being any hexidecimal digit\r\n* \"\\U******\": Matches any Unicode codepoint, with \"*\" being any hexidecimal digit\r\n\r\nThe following named character classes are also supported within a character class:\r\n* \"[:alnum:]\" - Alphanumeric characters ([A-Za-z0-9])\r\n* \"[:word:]\" - Alphanumeric characters + \"_\" ([A-Za-z0-9_])\r\n* \"[:alpha:]\" - Alphabetical characters ([A-Za-z])\r\n* \"[:blank:]\" - Space and tab ([ \\t])\r\n* \"[:cntrl:]\" - ASCII control characters ([\\x01-\\x1F])\r\n* \"[:digit:]\" - Numerical digits ([0-9])\r\n* \"[:graph:]\" - Visible characters ([\\x21-\\x7F])\r\n* \"[:lower:]\" - Lowercase characters ([a-z])\r\n* \"[:print:]\" - Printable characters ([\\x20-\\x7F])\r\n* \"[:punct:]\" - Punctuation ([\\]\\[\\!\\\"\\#\\$\\%\\&\\'\\(\\)\\*\\+\\,\\.\\/\\:\\;\\<\\=\\>\\?\\@\\\\\\^\\_\\`\\{\\|\\}\\~\\-])\r\n* \"[:space:]\" - Whitespace characters ([ \\t\\r\\n\\v\\f])\r\n* \"[:upper:]\" - Uppercase characters ([A-Z])\r\n* \"[:xdigit:]\" - Hexadecimal digits ([A-Fa-f0-9])\r\n\r\n## Output:\r\nWhen run, the program generates source code which provides an interface. The \r\ninterface will take in a stream of text, and produce \"tokens\" in the form of\r\na structure. The structure will contain an enumerated identifier, and \r\noptionally a string containing the text which was grouped into the token.\r\n\r\n## Example:\r\nThe following generates, compiles, and executes a simple FreeBasic test \r\napplication on Linux and Windows. Python 2.7 and FreeBASIC >= 0.90.1 should be \r\ninstalled prior to running. \r\n\r\n### Windows:\r\n1. Add the Poodle-Lex installation directory to your PATH environment variable\r\n1. Copy any .rules files in the \"Example\" folder from the installation directory to any folder\r\n1. Navigate to that folder in the command prompt\r\n1. Enter the following, replacing RULES_FILE with the name of the rules file being used:\r\nmkdir Output\r\nPoodle-Lex RULES_FILE Output\r\ncd Output\\Demo\r\nmake_demo\r\nDemo\r\n\r\n### Linux:\r\n* Sync the source\r\n* Install python 2.7\r\n* install blist (Ubuntu: sudo apt-get install python-blist)\r\n* Navigate to the source directory\r\n* Enter the following, replacing RULES_FILE with the nae of the rules file being used:\r\nmkdir Output\r\npython __main__.py RULES_FILE Output\r\ncd Output/Demo\r\n./make_demo.sh\r\n./Demo\r\n\r\n## Credits:\r\nPoodle-Lex is developed and maintained by Parker Michaels.\r\n\r\nThank you to everyone who helped test or provided feedback for this tool. This \r\nincludes members of the FreeBasic.net forum such as AGS and TFS.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}